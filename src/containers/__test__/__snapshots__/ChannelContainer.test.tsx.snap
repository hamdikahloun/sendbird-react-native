// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ChannelContainer should render correctly 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "backgroundColor": "#F5F5F5",
      "flex": 1,
      "paddingTop": 8,
    }
  }
>
  <View
    style={
      Object {
        "backgroundColor": "#f3F3F3",
        "paddingBottom": 8,
        "paddingHorizontal": 16,
      }
    }
  >
    <RCTScrollView
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={true}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      showsHorizontalScrollIndicator={false}
      stickyHeaderIndices={Array []}
      viewabilityConfigCallbackPairs={Array []}
    >
      <View />
    </RCTScrollView>
  </View>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    style={
      Object {
        "backgroundColor": "#f3F3F3",
        "flex": 1,
      }
    }
  >
    <RCTScrollView
      ListEmptyComponent={<ListEmptyComponent />}
      data={Array []}
      getItem={[Function]}
      getItemCount={[Function]}
      invertStickyHeaders={false}
      inverted={false}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onEndReached={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      showsVerticalScrollIndicator={false}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "paddingHorizontal": 16,
        }
      }
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            }
          }
        >
          <ActivityIndicator />
        </View>
      </View>
    </RCTScrollView>
  </RCTSafeAreaView>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "margin": 8,
      }
    }
  >
    <TextInput
      onChangeText={[Function]}
      placeholder="Aa"
      style={
        Object {
          "backgroundColor": "#EFEFEF",
          "borderColor": "#F9F9F9",
          "borderRadius": 10,
          "borderWidth": 1,
          "flex": 1,
          "height": 50,
          "marginEnd": 8,
          "padding": 10,
        }
      }
      testID="message"
      value=""
    />
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "height": 48,
          "justifyContent": "center",
          "opacity": 1,
          "padding": 10,
          "width": 48,
        }
      }
    >
      <Image
        source={
          Object {
            "testUri": "../../../src/assets/images/send/send.png",
          }
        }
      />
    </View>
  </View>
</RCTSafeAreaView>
`;
